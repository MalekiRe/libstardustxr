// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MESSAGE_STARDUSTXR_H_
#define FLATBUFFERS_GENERATED_MESSAGE_STARDUSTXR_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace StardustXR {

struct Message;
struct MessageBuilder;

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_ID = 6,
    VT_OBJECT = 8,
    VT_METHOD = 10,
    VT_ERROR = 12,
    VT_DATA = 14
  };
  uint8_t type() const { return GetField<uint8_t>(VT_TYPE, 0); }
  int32_t id() const { return GetField<int32_t>(VT_ID, 0); }
  const flatbuffers::String *object() const {
    return GetPointer<const flatbuffers::String *>(VT_OBJECT);
  }
  const flatbuffers::String *method() const {
    return GetPointer<const flatbuffers::String *>(VT_METHOD);
  }
  const flatbuffers::String *error() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  flexbuffers::Reference data_flexbuffer_root() const {
    return flexbuffers::GetRoot(data()->Data(), data()->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_OBJECT) &&
           verifier.VerifyString(object()) &&
           VerifyOffset(verifier, VT_METHOD) &&
           verifier.VerifyString(method()) &&
           VerifyOffset(verifier, VT_ERROR) && verifier.VerifyString(error()) &&
           VerifyOffset(verifier, VT_DATA) && verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(Message::VT_TYPE, type, 0);
  }
  void add_id(int32_t id) { fbb_.AddElement<int32_t>(Message::VT_ID, id, 0); }
  void add_object(flatbuffers::Offset<flatbuffers::String> object) {
    fbb_.AddOffset(Message::VT_OBJECT, object);
  }
  void add_method(flatbuffers::Offset<flatbuffers::String> method) {
    fbb_.AddOffset(Message::VT_METHOD, method);
  }
  void add_error(flatbuffers::Offset<flatbuffers::String> error) {
    fbb_.AddOffset(Message::VT_ERROR, error);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Message::VT_DATA, data);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message>
CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, uint8_t type = 0,
              int32_t id = 0,
              flatbuffers::Offset<flatbuffers::String> object = 0,
              flatbuffers::Offset<flatbuffers::String> method = 0,
              flatbuffers::Offset<flatbuffers::String> error = 0,
              flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_error(error);
  builder_.add_method(method);
  builder_.add_object(object);
  builder_.add_id(id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Message>
CreateMessageDirect(flatbuffers::FlatBufferBuilder &_fbb, uint8_t type = 0,
                    int32_t id = 0, const char *object = nullptr,
                    const char *method = nullptr, const char *error = nullptr,
                    const std::vector<uint8_t> *data = nullptr) {
  auto object__ = object ? _fbb.CreateString(object) : 0;
  auto method__ = method ? _fbb.CreateString(method) : 0;
  auto error__ = error ? _fbb.CreateString(error) : 0;
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return StardustXR::CreateMessage(_fbb, type, id, object__, method__, error__,
                                   data__);
}

inline const StardustXR::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<StardustXR::Message>(buf);
}

inline const StardustXR::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<StardustXR::Message>(buf);
}

inline bool VerifyMessageBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<StardustXR::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<StardustXR::Message>(nullptr);
}

inline void FinishMessageBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                flatbuffers::Offset<StardustXR::Message> root) {
  fbb.Finish(root);
}

inline void
FinishSizePrefixedMessageBuffer(flatbuffers::FlatBufferBuilder &fbb,
                                flatbuffers::Offset<StardustXR::Message> root) {
  fbb.FinishSizePrefixed(root);
}

} // namespace StardustXR

#endif // FLATBUFFERS_GENERATED_MESSAGE_STARDUSTXR_H_
